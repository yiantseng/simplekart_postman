{
	"info": {
		"_postman_id": "510915dc-391b-498e-be53-877cacc7f077",
		"name": "SimpleKart Integration Tests-2.0.0",
		"description": "API for an imaginary E-Commerce store to demonstrate API Builder capabilities in Postman\n\nContact Support:\n Name: Postman Team\n Email: simplekart@postman.com",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Create new order and fetch it's items",
			"item": [
				{
					"name": "Post order details to the database",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5d1bfead-4197-41fe-b0a7-973b436b13de",
								"type": "text/javascript",
								"exec": [
									"const body = pm.response.json();",
									"",
									"eval(pm.variables.get(\"lib\"));",
									"",
									"// Views",
									"const template = `",
									"    <style>",
									"        body {",
									"            color: #fff;",
									"        }",
									"    </style>",
									"    <h5>Order: {{id}}</h5>",
									"    <p>",
									"        <b>Address:</b> {{address}}</br>",
									"        Delivery By: {{arrivalDate}}",
									"    </p>",
									"    <hr />",
									"    <table>",
									"        <tr>",
									"            <th style=\"padding-left: 10px;\">Name</th>",
									"            <th>Description</th>",
									"            <th style=\"padding-right: 10px;\">Price</th>",
									"        </tr>",
									"",
									"        {{#each items}}",
									"            <tr>",
									"                <td style=\"padding-left: 10px;\">{{name}}</td>",
									"                <td>{{description}}</td>",
									"                <td style=\"padding-right: 10px;\">£ {{price}}</td>",
									"            </tr>",
									"        {{/each}}",
									"        ",
									"        <tr>",
									"            <td colSpan=2 style=\"text-align: right\">",
									"                <b>Total</b>",
									"            </td>",
									"            <td>£ {{total}}</td>",
									"        </tr>",
									"    </table>",
									"`;",
									"",
									"pm.visualizer.set(template, {",
									"    items: body.items,",
									"    id: body.orderId,",
									"    address: body.address,",
									"    total: body.orderTotal,",
									"    arrivalDate: body.arrivalDate",
									"});",
									"",
									"",
									"// Tests",
									"",
									"it(\"Should have 200 OK status code\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"it('Order should have the correct item', function () {",
									"    expect(body.orderId).to.be.ok;",
									"   // expect(body.items.length).to.eql(1);",
									"    ",
									"    expect(body.arrivalDate).to.be.ok;",
									"    expect(body.orderDate).to.be.ok;",
									"   // expect(body.orderTotal).to.eql(15);",
									"    //expect(body.address).to.eql('SimpleKart HQ, 221B Baker street');",
									"});",
									"",
									"pm.environment.set('orderId', body.orderId);"
								]
							}
						}
					],
					"id": "3e023daf-01af-4c29-a798-027c933d4229",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"address\": \"<string>\",\n    \"item\": {\n        \"itemId\": 15,\n        \"name\": \"<string>\",\n        \"price\": 2000,\n        \"description\": \"<string>\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/orders",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							]
						},
						"description": "Post item order to orders database"
					},
					"response": []
				},
				{
					"name": "Get order details from database",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f585e8f9-8f9f-45d9-9071-4afe43ffea6a",
								"type": "text/javascript",
								"exec": [
									"const body = pm.response.json();",
									"",
									"eval(pm.variables.get(\"lib\"));",
									"",
									"// Views",
									"const template = `",
									"    <style>",
									"        body {",
									"            color: #fff;",
									"        }",
									"    </style>",
									"    <h5>Order: {{id}}</h5>",
									"    <p>",
									"        <b>Address:</b> {{address}}</br>",
									"        Delivery By: {{arrivalDate}}",
									"    </p>",
									"    <hr />",
									"    <table>",
									"        <tr>",
									"            <th style=\"padding-left: 10px;\">Name</th>",
									"            <th>Description</th>",
									"            <th style=\"padding-right: 10px;\">Price</th>",
									"        </tr>",
									"",
									"        {{#each items}}",
									"            <tr>",
									"                <td style=\"padding-left: 10px;\">{{name}}</td>",
									"                <td>{{description}}</td>",
									"                <td style=\"padding-right: 10px;\">£ {{price}}</td>",
									"            </tr>",
									"        {{/each}}",
									"        ",
									"        <tr>",
									"            <td colSpan=2 style=\"text-align: right\">",
									"                <b>Total</b>",
									"            </td>",
									"            <td>£ {{total}}</td>",
									"        </tr>",
									"    </table>",
									"`;",
									"",
									"pm.visualizer.set(template, {",
									"    items: body.items,",
									"    id: body.orderId,",
									"    address: body.address,",
									"    total: body.orderTotal,",
									"    arrivalDate: body.arrivalDate",
									"});",
									"",
									"",
									"// Tests",
									"",
									"it(\"Should have 200 OK status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"it('Order should have the correct item', function () {",
									"    expect(body.orderId).to.be.ok;",
									"  //  expect(body.items.length).to.eql(1);",
									"    ",
									"    expect(body.arrivalDate).to.be.ok;",
									"    expect(body.orderDate).to.be.ok;",
									" //   expect(body.orderTotal).to.eql(15);",
									"  //  expect(body.address).to.eql('SimpleKart HQ, 221B Baker street');",
									"});"
								]
							}
						}
					],
					"id": "25452b52-f1c1-4191-bc02-8790140c76e3",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "865",
									"id": "81a13b09-0381-4e3a-97b8-1aa3b11866e5",
									"type": "string"
								}
							]
						},
						"description": "Obtain item details from the database"
					},
					"response": [],
					"variable": [
						{
							"id": "81a13b09-0381-4e3a-97b8-1aa3b11866e5",
							"key": "orderId",
							"value": "865",
							"type": "string"
						}
					]
				}
			],
			"id": "e97ff336-fc4e-4256-a0d0-515d61e82947"
		},
		{
			"name": "Fetch order details given an order id",
			"item": [
				{
					"name": "Get order details from database",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ac81e78-dba7-41b0-b242-28113cee3878",
								"type": "text/javascript",
								"exec": [
									"const body = pm.response.json();",
									"",
									"eval(pm.variables.get(\"lib\"));",
									"",
									"// Views",
									"const template = `",
									"    <style>",
									"        body {",
									"            color: #fff;",
									"        }",
									"    </style>",
									"    <h5>Order: {{id}}</h5>",
									"    <p>",
									"        <b>Address:</b> {{address}}</br>",
									"        Delivery By: {{arrivalDate}}",
									"    </p>",
									"    <hr />",
									"    <table>",
									"        <tr>",
									"            <th style=\"padding-left: 10px;\">Name</th>",
									"            <th>Description</th>",
									"            <th style=\"padding-right: 10px;\">Price</th>",
									"        </tr>",
									"",
									"        {{#each items}}",
									"            <tr>",
									"                <td style=\"padding-left: 10px;\">{{name}}</td>",
									"                <td>{{description}}</td>",
									"                <td style=\"padding-right: 10px;\">£ {{price}}</td>",
									"            </tr>",
									"        {{/each}}",
									"        ",
									"        <tr>",
									"            <td colSpan=2 style=\"text-align: right\">",
									"                <b>Total</b>",
									"            </td>",
									"            <td>£ {{total}}</td>",
									"        </tr>",
									"    </table>",
									"`;",
									"",
									"pm.visualizer.set(template, {",
									"    items: body.items,",
									"    id: body.orderId,",
									"    address: body.address,",
									"    total: body.orderTotal,",
									"    arrivalDate: body.arrivalDate",
									"});",
									"",
									"",
									"// Tests",
									"",
									"it(\"Should have 200 OK status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									""
								]
							}
						}
					],
					"id": "679ccbca-b9c2-4888-905e-3062d7e36858",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders/:orderId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders",
								":orderId"
							],
							"variable": [
								{
									"key": "orderId",
									"value": "{{orderId}}"
								}
							]
						},
						"description": "Obtain item details from the database"
					},
					"response": []
				}
			],
			"id": "2ba94793-288e-48ed-a9e7-9377fb483637"
		},
		{
			"name": "Check items and its details",
			"item": [
				{
					"name": "Get items from the database",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aff90401-e872-4a7d-9a00-aad2ed44957f",
								"type": "text/javascript",
								"exec": [
									"const body = pm.response.json();",
									"",
									"eval(pm.variables.get(\"lib\"));",
									"",
									"// Views",
									"const template = `",
									"    <style>",
									"        body {",
									"            color: #fff;",
									"        }",
									"    </style>",
									"    <table>",
									"        <tr>",
									"            <th style=\"padding-left: 10px; width: 25%;\">Name</th>",
									"            <th style=\"width: 50%\">Description</th>",
									"            <th style=\"padding-right: 10px;\">Price</th>",
									"        </tr>",
									"",
									"        {{#each items}}",
									"            <tr>",
									"                <td style=\"padding-left: 10px;\">{{name}}</td>",
									"                <td>{{description}}</td>",
									"                <td style=\"padding-right: 10px;\">£ {{price}}</td>",
									"            </tr>",
									"        {{/each}}",
									"    </table>",
									"`;",
									"",
									"pm.visualizer.set(template, {",
									"    items: body",
									"});",
									"",
									"",
									"// Tests",
									"",
									"it(\"Should have 200 OK status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"it('Order should have the correct item', function () {",
									"    expect(body.length).to.be.ok;",
									"    ",
									"    body.forEach((item) => {",
									"        expect(item.name).to.be.ok;",
									"        expect(item.description).to.be.ok;",
									"        expect(item.itemId).to.be.ok;",
									"        expect(item.price).to.be.ok;",
									"    });",
									"});"
								]
							}
						}
					],
					"id": "f66f5c1a-b3a3-4cb5-8273-90e43818f9e1",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items?list=10",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items"
							],
							"query": [
								{
									"key": "list",
									"value": "10"
								}
							]
						},
						"description": "Pull a list of items from item database"
					},
					"response": []
				},
				{
					"name": "Get item from the database",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4b65c8af-9aa1-4196-adfa-39f251db44f3",
								"type": "text/javascript",
								"exec": [
									"const body = pm.response.json();",
									"",
									"eval(pm.variables.get(\"lib\"));",
									"",
									"// Views",
									"const template = `",
									"    <style>",
									"        body {",
									"            color: #fff;",
									"        }",
									"    </style>",
									"    <table>",
									"        <tr>",
									"            <th style=\"padding-left: 10px; width: 10%;\">Id</th>",
									"            <th style=\"width: 15%;\">Name</th>",
									"            <th style=\"width: 40%\">Description</th>",
									"            <th style=\"padding-right: 10px;\">Price</th>",
									"        </tr>",
									"",
									"        <tr>",
									"            <td style=\"padding-left: 10px;\">{{itemId}}</td>",
									"            <td>{{name}}</td>",
									"            <td>{{description}}</td>",
									"            <td style=\"padding-right: 10px;\">£ {{price}}</td>",
									"        </tr>",
									"    </table>",
									"`;",
									"",
									"pm.visualizer.set(template, {...body});",
									"",
									"",
									"// Tests",
									"",
									"it(\"Should have 200 OK status code\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"it('Order should have the correct item', function () {",
									"    expect(body.name).to.be.ok;",
									"    expect(body.description).to.be.ok;",
									"    expect(body.itemId).to.be.ok;",
									"    expect(body.price).to.be.ok;",
									"});"
								]
							}
						}
					],
					"id": "5ef9ac34-79a0-4de5-a0e4-d8cd0059f115",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/items/:itemId",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"items",
								":itemId"
							],
							"variable": [
								{
									"key": "itemId",
									"value": "16247"
								}
							]
						},
						"description": "Obtain item details from item database"
					},
					"response": []
				}
			],
			"id": "9665552b-00d5-4115-901e-5ecb2951365e"
		},
		{
			"name": "Get orders from the database ",
			"id": "e4d02203-3807-46bf-8c04-907ed30c83c9",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/orders?list=6",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"orders"
					],
					"query": [
						{
							"description": "Number of orders to show",
							"key": "list",
							"value": "6"
						}
					]
				},
				"description": "Obtain order details from orders database"
			},
			"response": [
				{
					"id": "c806ebf7-adfb-4bd6-8c0e-8ce16481f66d",
					"name": "OK - Successful pull of orders",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/orders?list=1",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"orders"
							],
							"query": [
								{
									"key": "list",
									"value": "1"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "Text",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"responseTime": null,
					"body": "[\n {\n  \"orderId\": 674,\n  \"items\": [\n   {\n    \"itemId\": 1657,\n    \"name\": \"Smart WiFi Router\",\n    \"price\": 2096,\n    \"description\": \"Wifi router/wireless router. One of routers for wireless internet, wireless routers for home. Dual band router and gigabit router. Ideal as internet router also gaming router. Long range coverage with high speed. Compatible with all 802.11ac devices and below. 5ghz router/5g router Frequency Range: 2.4GHz and 5GHz; Interface Available: 4 x 10/100/1000Mbps LAN Ports, 1 10/100/1000Mbps WAN Port, 1 USB 2.0 Ports; Protocols Supported: Supports IPv4 and IPv6; System Requirement: Microsoft Windows 98SE NT 2000 XP Vista, or Windows 7 Windows 8/8.1/10, MAC OS NetWare UNIX or Linux; Wireless Standards: IEEE 802.11ac/n/a 5GHz, IEEE 802.11b/g/n 2.4GH\"\n   }\n  ],\n  \"arrivalDate\": \"2020-03-03T13:07:45.962Z\",\n  \"orderDate\": \"2020-03-01T19:27:26.733Z\",\n  \"orderTotal\": 2096,\n  \"address\": \"95 Tarkiln Hill St.Laurel, MD 20707\"\n },\n {\n  \"orderId\": 675,\n  \"items\": [\n   {\n    \"itemId\": 1658,\n    \"name\": \"VR Gaming Headset\",\n    \"price\": 79990,\n    \"description\": \"VR Gaming Headset puts you at the center of virtual reality's most pulse-pounding, PC-powered gameplay. See the action unfold all around you through our sharpest lenses and next-generation optics. Lose yourself in the experience with a comfortable, improved design that lets you start playing faster and keep playing longer. Insight tracking gives you the power to move throughout your playspace in any direction. No external sensors. No complicated setup. Just hands-on action and interaction with our updated Oculus Touch controllers right out of the box. Step into the game and the future of PC VR.\"\n   }\n  ],\n  \"arrivalDate\": \"2020-03-03T15:00:56.787Z\",\n  \"orderDate\": \"2020-03-02T21:25:22.096Z\",\n  \"orderTotal\": 79990,\n  \"address\": \"7405 Arcadia St.Rockville, MD 20850\"\n },\n {\n  \"orderId\": 676,\n  \"items\": [\n   {\n    \"itemId\": 1665,\n    \"name\": \"Smart Watch\",\n    \"price\": 1805,\n    \"description\": \"Built-in Multi-Sports Mode, record your Running, Cycling, Football, Swimming, Table Tennis, Badminton, Climbing, recording your daily sports data.\"\n   }\n  ],\n  \"arrivalDate\": \"2020-03-05T17:30:15.156Z\",\n  \"orderDate\": \"2020-03-03T01:10:27.512Z\",\n  \"orderTotal\": 1805,\n  \"address\": \"9791 Lawrence Dr.Marlton, NJ 08053r\"\n },\n {\n  \"orderId\": 677,\n  \"items\": [\n   {\n    \"itemId\": 1659,\n    \"name\": \"Classic Loop Top Shaker Bottle, 20-Ounce\",\n    \"price\": 578,\n    \"description\": \"Easy to maintain proper nutrition and hydration on-the-go.The wide mouth makes it easy to add scoops of powdered mixes, meal ingredients, and liquids, and embossed markings show both ounces and milliliters for easy measuring anywhere (note that markings on the 20-ounce capacity shaker cup only go up to 12 ounces). Bottle contents and liquids are securely contained thanks to a tightly threaded screw-on lid that creates a leakproof seal, and a flip cap that snaps securely shut for shaking and transportation.\"\n   }\n  ],\n  \"arrivalDate\": \"2020-03-03T18:16:24.911Z\",\n  \"orderDate\": \"2020-03-01T06:09:23.007Z\",\n  \"orderTotal\": 578,\n  \"address\": \"822 Clay St.Tampa, FL 33604\"\n },\n {\n  \"orderId\": 678,\n  \"items\": [\n   {\n    \"itemId\": 1663,\n    \"name\": \"Hair Dryer\",\n    \"price\": 1400,\n    \"description\": \"Hair dryer is engineered to protect hair from extreme heat damage, with the fastest drying+ and controlled styling to help increase smoothness by 75%, increase shine by up to 132% and decrease frizz and flyaways by up to 61%.\"\n   }\n  ],\n  \"arrivalDate\": \"2020-03-04T12:09:07.955Z\",\n  \"orderDate\": \"2020-03-02T21:50:44.173Z\",\n  \"orderTotal\": 1400,\n  \"address\": \"7444 SW. State Ave.Philadelphia, PA 19111\"\n },\n {\n  \"orderId\": 679,\n  \"items\": [\n   {\n    \"itemId\": 1660,\n    \"name\": \"4-Port USB 2.0 Hub\",\n    \"price\": 505,\n    \"description\": \"Easily add up to 4 devices with the USB 2.0 Hub. Particularly great for recent notebooks that provide a limited number of USB ports. Achieve full 480 Mbps on each port, or daisy-chain multiple hubs to a maximum of 127 devices.Fully backwards compatible with the USB 1.1 products.\"\n   }\n  ],\n  \"arrivalDate\": \"2020-03-04T11:29:56.99Z\",\n  \"orderDate\": \"2020-03-03T00:51:26.19Z\",\n  \"orderTotal\": 505,\n  \"address\": \"307 Purple Finch Ave.New Lenox, IL 60451\"\n },\n {\n  \"orderId\": 680,\n  \"items\": [\n   {\n    \"itemId\": 1661,\n    \"name\": \"Wipes Flushable Wet Wipes Dispenser, Mint Chill, 48 Count (Pack of 3)\",\n    \"price\": 938,\n    \"description\": \"For a superior clean that’s fresh, gentle, and effective, choose Wipes with the CleaningRipples Texture. Wipes are 100 percent flushable, remove odor causing bacteria and offer a large, dual layer wipe to clean better than when using dry toilet paper alone.\"\n   }\n  ],\n  \"arrivalDate\": \"2020-03-04T02:06:58.886Z\",\n  \"orderDate\": \"2020-03-02T04:33:52.652Z\",\n  \"orderTotal\": 938,\n  \"address\": \"946 Holly StreetHamilton, OH 45011\"\n },\n {\n  \"orderId\": 681,\n  \"items\": [\n   {\n    \"itemId\": 1663,\n    \"name\": \"Hair Dryer\",\n    \"price\": 1400,\n    \"description\": \"Hair dryer is engineered to protect hair from extreme heat damage, with the fastest drying+ and controlled styling to help increase smoothness by 75%, increase shine by up to 132% and decrease frizz and flyaways by up to 61%.\"\n   }\n  ],\n  \"arrivalDate\": \"2020-03-04T17:26:07.706Z\",\n  \"orderDate\": \"2020-03-02T04:17:23.689Z\",\n  \"orderTotal\": 1400,\n  \"address\": \"8924 East Birchwood St.Hamburg, NY 14075\"\n },\n {\n  \"orderId\": 682,\n  \"items\": [\n   {\n    \"itemId\": 1665,\n    \"name\": \"Smart Watch\",\n    \"price\": 1805,\n    \"description\": \"Built-in Multi-Sports Mode, record your Running, Cycling, Football, Swimming, Table Tennis, Badminton, Climbing, recording your daily sports data.\"\n   }\n  ],\n  \"arrivalDate\": \"2020-03-05T14:07:01.688Z\",\n  \"orderDate\": \"2020-03-03T04:58:18.504Z\",\n  \"orderTotal\": 1805,\n  \"address\": \"10 Wilson LaneBay City, MI 48706\"\n },\n {\n  \"orderId\": 683,\n  \"items\": [\n   {\n    \"itemId\": 1666,\n    \"name\": \"Learning Thermostat, 3rd Gen, Smart Thermostat\",\n    \"price\": 15746,\n    \"description\": \"Learning Thermostat is a smart thermostat that learns what temperatures you like, turns itself down when you’re away and connects to your phone. It has a big, sharp display. And it’s proven to help save energy. In independent studies, the Thermostat saved an average of 10% to 12% on heating bills and 15% on cooling bills.\"\n   }\n  ],\n  \"arrivalDate\": \"2020-03-05T10:43:23.713Z\",\n  \"orderDate\": \"2020-03-03T08:34:21.21Z\",\n  \"orderTotal\": 15746,\n  \"address\": \"m81 West Shirley Dr.Greenfield, IN 46140\"\n },\n {\n  \"orderId\": 656,\n  \"items\": [\n   {\n    \"itemId\": 16247,\n    \"name\": \"Postman Merch\",\n    \"price\": 15,\n    \"description\": \"Official T-shirt for the Postman community.\"\n   }\n  ],\n  \"arrivalDate\": \"2020-3-04T13:07:45.962Z\",\n  \"orderDate\": \"2020-03-06T19:27:26.733Z\",\n  \"orderTotal\": 15,\n  \"address\": \"SimpleKart HQ, 221B Baker street\"\n }\n]"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "a8aa106c-bd90-4bf2-bb46-bf4961771549",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "412468d8-3ed0-4403-a034-d06d13061acd",
				"type": "text/javascript",
				"exec": [
					"var it = pm.test;",
					"var expect = pm.expect;"
				]
			}
		}
	],
	"variable": [
		{
			"id": "a722f8b8-0dd7-4bfb-8714-1b2baab9d273",
			"key": "baseUrl",
			"value": "https://api.simplekart.com",
			"type": "string"
		},
		{
			"id": "d80a57b5-8955-4aed-944e-36b1bb8cf8d2",
			"key": "lib",
			"value": "var it = pm.test;\nvar expect = pm.expect;",
			"type": "string"
		}
	]
}